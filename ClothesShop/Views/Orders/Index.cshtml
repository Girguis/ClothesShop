@model ClothesShop.Models.OrdersViewModel

@{
    ViewBag.Title = ClothesShop.Languages.Resources.Orders;
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section scripts{
    @Scripts.Render("~/Scripts/print")
<script>
        var msg = "@Html.Raw(ClothesShop.Languages.Resources.AreYouSureDeleteOrder)";
        var totallyDeliveredStatus = "@((int)ClothesShop.Enums.OrderStatuses.TotallyDelivered)";

        function ConfirmDeleteOrder(id) {
            var url = '@Url.Action("Delete", "Orders")';
            var data = JSON.stringify({ id: id });
            CommonManager.prototype.ConfirmDelete(url, data);
        }
var orderBy = {
            ColumnName: "ID",
            Direction: "desc",
        }
        var isUpdate = "@ClothesShop.Helpers.RolesHelper.CheckRoleRight("Orders", ClothesShop.Enums.RoleType.Edit)" == "True";
        var isDelete = "@ClothesShop.Helpers.RolesHelper.CheckRoleRight("Orders", ClothesShop.Enums.RoleType.Delete)" == "True";
        var isDetails = "@ClothesShop.Helpers.RolesHelper.CheckRoleRight("Orders", ClothesShop.Enums.RoleType.Details)" == "True";
        var updateURL = "@Url.Action("Edit", "Orders")/";
        var detailsURL = "@Url.Action("Details", "Orders")/";
        var dataURL = '@Url.Action("GetAll", "Orders")';
        var columns = [];
        var searchColumns = [{ Name: "ID", Type: "input" }, { Name: "RequestDate", Type: "date" }, { Name: "Customer_Name", Type: "input" },
            { Name: "Customer_MobileNumber1", Type: "input" }, { Name: "OrderStatusID", Type: "select" }
            , { Name: "EmployeeName", Type: "input" }, { Name: "SellerName", Type: "input" }];
        var deleteURL = "ConfirmDeleteOrder";
        var printURL = '@Url.Action("ExportToPDF", "Orders")';
        var gridId = "OrdersGrid";
        var viewName = "Orders";
         var rootURL = "@Url.Content("/")";
        $(document).ready(function () {
            var tableManager = new TableManager();
            TableManager.prototype.Init();
            var printManager = new PrintManager();
        })
</script>

}
<div class="container tableContainer">
    @if (ClothesShop.Helpers.RolesHelper.CheckRoleRight("Orders", ClothesShop.Enums.RoleType.Add))
    {
        <p class="f-left">
            <a href="@Url.Action("Create", "Orders", new { area = "" })" class="btn btn-lg btn-outline-success">
                <i class="fa fa-plus"></i> @ClothesShop.Languages.Resources.AddOrder
            </a>
        </p>
    }

    <table id="OrdersGrid" class="table table-striped table-hover table-bordered table-responsive GeneralTable" width="100%" cellspacing="0">
        <thead>
            <tr class="theadData">
                <th class="width15" data-headerid="ID" data-dir="desc" onclick="TableManager.prototype.Sort(this);">
                    <i class="fa fa-arrow-down searchArrow"></i> @Html.DisplayNameFor(model => model.ID)
                </th>
                <th class="width30" data-headerid="RequestDate" data-dir="" onclick="TableManager.prototype.Sort(this);">
                    @Html.DisplayNameFor(model => model.RequestDate)
                </th>
                <th class="width30">@Html.DisplayNameFor(model => model.Customer.Name)</th>
                <th class="width30">@Html.DisplayNameFor(model => model.Customer.MobileNumber1)</th>
                <th class="width30">@Html.DisplayNameFor(model => model.Customer.Address)</th>
                <th class="width15" data-headerid="OrderTotalPrice" data-dir="" onclick="TableManager.prototype.Sort(this);">
                    @Html.DisplayNameFor(model => model.OrderTotalPrice)
                </th>
                <th class="width15" data-headerid="ShipmentPrice" data-dir="" onclick="TableManager.prototype.Sort(this);">
                    @Html.DisplayNameFor(model => model.ShipmentPrice)
                </th>
                <th class="width30">@Html.DisplayNameFor(model => model.OrderStatusID)</th>
                <th class="width30">@Html.DisplayNameFor(model => model.EmployeeID)</th>
                <th class="width30">@Html.DisplayNameFor(model => model.SellerID)</th>
                <th class="width15"></th>
                <th class="width15"></th>
                <th class="width15"></th>
                <th class="width15"></th>
            </tr>
            <tr class="searchRow">
                <th class="padding0 width15">
                    <div class="searchInput">
                        <i class="fa fa-search"></i>
                        @Html.EditorFor(model => model.ID, new { htmlAttributes = new { @id = "ID", @class = "form-control setMaxWidth", @type = "text", placeholder = @ClothesShop.Languages.Resources.Search } })
                    </div>
                </th>
                <th class="padding0 width30">
                    @Html.EditorFor(model => model.RequestDate, new { htmlAttributes = new { @id = "RequestDate", @class = "form-control setMaxWidth", placeholder = @ClothesShop.Languages.Resources.Search } })


                </th>
                <th class="padding0 width30">
                    <div class="searchInput">
                        <i class="fa fa-search"></i>
                        @Html.EditorFor(model => model.Customer.Name, new { htmlAttributes = new { @id = "Customer_Name", @class = "form-control setMaxWidth", placeholder = @ClothesShop.Languages.Resources.Search } })
                    </div>
                </th>
                <th class="padding0 width30">
                    <div class="searchInput">
                        <i class="fa fa-search"></i>
                        @Html.EditorFor(model => model.Customer.MobileNumber1, new { htmlAttributes = new { @id = "Customer_MobileNumber1", @class = "form-control setMaxWidth", placeholder = @ClothesShop.Languages.Resources.Search } })
                    </div>
                </th>
                <th class="width30"></th>
                <th class="width15"></th>
                <th class="width15"></th>
                @{
                    var orderStatuses = ClothesShop.Helpers.Helper.EnumToList<ClothesShop.Enums.OrderStatuses>();

                    if (orderStatuses != null && orderStatuses.Count > 0)
                    {
                        orderStatuses.Insert(0, new ClothesShop.Helpers.General() { ID = -1, Name = ClothesShop.Languages.Resources.All });
                    }
                }
                <th class="padding0 width30">
                    @Html.DropDownListFor(model => model.OrderStatusID, new SelectList(orderStatuses, "ID", "Name"), new { @id = "OrderStatusID", @class = "form-control setMaxWidth" })
                </th>
                <th class="padding0 width30">
                    <div class="searchInput">
                        <i class="fa fa-search"></i>
                        @Html.EditorFor(model => model.EmployeeName, new { htmlAttributes = new { @id = "EmployeeName", @class = "form-control setMaxWidth", placeholder = @ClothesShop.Languages.Resources.Search } })
                    </div>
                </th>
                <th class="padding0 width30">
                    <div class="searchInput">
                        <i class="fa fa-search"></i>
                        @Html.EditorFor(model => model.SellerName, new { htmlAttributes = new { @id = "SellerName", @class = "form-control setMaxWidth", placeholder = @ClothesShop.Languages.Resources.Search } })
                    </div>
                </th>
                <th class="width15"></th>
                <th class="width15"></th>
                <th class="width15"></th>
                <th class="width15"></th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>
<div class="container text-center">
    <ul id="Pager" class="pagination-sm"></ul>
</div>